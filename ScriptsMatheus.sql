UPDATE CLIENTE SET TELEFONE = '22032112'
WHERE NOME = 'JOAO';

SELECT ENDERECO, COUNT(*) FROM CLIENTE GROUP BY ENDERECO;

/* PRIMEIRA FORMA NORMAL */

/*
1 - TODO CAMPO VETORIZADO SE TORNA OUTRA TABELA

[AMARELO, AZUL, LARANJA] -> CORES
[KA, UNO, CIVIC] -> CARROS

2 - TODO CAMPO MULTIVALORADO SE TORNARA OUTRA TABELA
(OU QUANDO O CAMPO FOR DIVISIVEL)

3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE
TODO O REGISTRO COMO SENDO ÚNICO.
ISSO É O QUE CHAMAMOS DE CHAVE PRIMÁRIA OU PRIMARY KEY. 

*/

CREATE DATABASE COMERCIO;

USE COMERCIO;

SHOW DATABASES;

/* ENUM = RESTRINGE A VALORES*/

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('RES', 'COM', 'CEL') NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY
);

/* endereco - obrigatório
	cadastro de somente UM.
	TELEFONE - NÃO OBRIGATÓRIO
	CADASTRO DE MAIS DE UM (OPCIONAL)
*/

/* EM RELACIONAMENTO 1X1 A CHAVE ESTR*/


/*A CHAVE PRIMÁRIA É DE RESPONSABILIDADE DO SQL, LOGO DEIXAMOS NULL*/


INSERT INTO CLIENTE VALUES (NULL, 'JOAO', 'M', 'joao@ig.com','7236126162');
INSERT INTO CLIENTE VALUES (NULL, 'ANA', 'F', 'ana@ig.com',FLOOR(1 + RAND() * 1000000000));
INSERT INTO CLIENTE VALUES (NULL, 'LIVIA', 'F', NULL ,FLOOR(1 + RAND() * 1000000000));
INSERT INTO CLIENTE VALUES (NULL, 'JULIA', 'F', 'julia@ig.com',FLOOR(1 + RAND() * 1000000000));
INSERT INTO CLIENTE VALUES (NULL, 'MATHEUS', 'M', 'matheus@ig.com',FLOOR(1 + RAND() * 1000000000));
INSERT INTO CLIENTE VALUES (NULL, 'HELOISA', 'F', 'heloisa@ig.com',FLOOR(1 + RAND() * 1000000000));
INSERT INTO CLIENTE VALUES (NULL, 'ITALO', 'M', 'italo@ig.com',FLOOR(1 + RAND() * 1000000000));


INSERT INTO ENDERECO VALUES (NULL, 'RUA AUGUSTA', 'JARDINS', 'SÃO PAULO', 'SP', 2);
INSERT INTO ENDERECO VALUES (NULL, 'AVENIDA PAULISTA', 'BELA VISTA', 'SÃO PAULO', 'SP', 1);
INSERT INTO ENDERECO VALUES (NULL, 'RUA MANOEL GIL', 'VILA SANTA MARIA', 'WENCESLAU BRAZ', 'PR', 3);
INSERT INTO ENDERECO VALUES (4, 'AVENIDA HIGIENÓPOLIS', 'CENTRO', 'LONDRINA', 'PR', 5);
INSERT INTO ENDERECO VALUES (NULL, 'RUA PADRE AGOSTINHO', 'BIGORRILHO', 'CURITIBA', 'PR', 7);
INSERT INTO ENDERECO VALUES (NULL, 'RUA DE AURORA', 'BOA VISTA E SANTO AMARO', 'RECIFE', 'PE', 4);
INSERT INTO ENDERECO VALUES (NULL, 'RUA GONÇALO DE CARVALHO', 'INDEPENDÊNCIA', 'PORTO ALEGRE', 'RS', 6);

DESC ENDERECO;

INSERT INTO TELEFONE VALUES(NULL, 'CEL', '43999862205', 3);
INSERT INTO TELEFONE VALUES(NULL, 'RES', '35282384', 3);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '38202312', 5);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '43993123', 4);
INSERT INTO TELEFONE VALUES(NULL, 'COM', '43993123', 6);

/* SELEÇÃO, PROJEÇÃO, JUNÇÃO */

/* PROJEÇÃO -> É TUDO QUE VOCÊ QUER VER NA TELA*/

SELECT NOW() AS DATA_ATUAL;

/* AS NOMEIA ALGUMA COISA */

SELECT 2 - 2 AS SUBTRACAO;

SELECT NOME, SEXO FROM CLIENTE WHERE NOME = "%M";

/* JUNCAO -> JOIN*/

SELECT NOME, EMAIL, IDCLIENTE FROM CLIENTE WHERE NOME = "%M";

SELECT NOME, SEXO, CIDADE, BAIRRO FROM CLIENTE, ENDERECO WHERE IDCLIENTE = ID_CLIENTE;

/*funciona, MAS NÃO É UMA BOA PRÁTICA, MELHOR USAR O JOIN
POR QUE? PORQUE O IDCLIENTE = ID_CLIENTE SEMPRE É VERDADE,
LOGO DESTA FORMA IRÁ GERAR MAIS PROCESSAMENTO, QUANDO PODERÍAMOS
SIMPLESMENTE DAR UM JOIN E ELE SÓ PROCESSARIA UMA VEZ, POR ISTO*/

SELECT NOME, SEXO, CIDADE, BAIRRO /* projecão*/
FROM CLIENTE /*origem*/
	INNER JOIN ENDERECO  /*junção*/
	ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'; /* seleção*/


SELECT NOME, SEXO, EMAIL, TIPO, NUMERO
FROM CLIENTE
	INNER JOIN TELEFONE 
	ON IDCLIENTE = ID_CLIENTE

/* jUNÇÃO DE MAIS DE 2 TABELAS*/

/*NOME, SEXO, BAIRRO, CIDADE, TIPO, NUMERO 
ESPECIFICAR EM TUDO DE ONDE VEM CADA COLUNA*/

SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
	INNER JOIN ENDERECO
	ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
	INNER JOIN TELEFONE
	ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE; 


/*A abreviação do nome das tabelas auxilia no processamento*/


SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
	INNER JOIN ENDERECO E
	ON C.IDCLIENTE = E.ID_CLIENTE
	INNER JOIN TELEFONE T
	ON C.IDCLIENTE = T.ID_CLIENTE; 


/* 
	Linguagem SQL É de 4ª geração
*/

/* DML */

UPDATE CLIENTE
SET SEXO = 'F'
WHERE ID_CLIENTE = 2;

DELETE FROM CLIENTE
WHERE ID_CLIENTE 2; 

/* ddl*/

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO  VARCHAR(30) NOT NULL,
	PRECO INT,
	FRETE FLOAT(10,2) NOT NULL
);

/* ALTER TABLE*/

ALTER TABLE PRODUTO
CHANGE PRECO VALOR_UNITARIO INT NOT NULL;

ALTER TABLE PRODUTO
CHANGE VALOR_UNITARIO PRECO INT NOT NULL;

/* modify */

ALTER TABLE PRODUTO
CHANGE VALOR_UNITARIO VARCHAR(50) NOT NULL;

/* ADICIONANDO COLUNAS*/

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

/* apagando uma coluna */

ALTER TABLE PRODUTO
DROP COLUMN PESO;

/* ADICIONANDO UMA COLUNA NA ORDEM ESPECIFICA*/

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL 
AFTER NOME_PRODUTO;

/* ADICIONANDO NA PRIMEIRA COLUNA*/

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL 
FIRST;

INSERT INTO CLIENTE VALUES(NULL,'FLAVIO','M','FLAVIO@IG.COM','4657765');
INSERT INTO CLIENTE VALUES(NULL,'ANDRE','M','ANDRE@GLOBO.COM','7687567');
INSERT INTO CLIENTE VALUES(NULL,'GIOVANA','F',NULL,'0876655');
INSERT INTO CLIENTE VALUES(NULL,'KARLA','M','KARLA@GMAIL.COM','545676778');
INSERT INTO CLIENTE VALUES(NULL,'DANIELE','M','DANIELE@GMAIL.COM','43536789');
INSERT INTO CLIENTE VALUES(NULL,'LORENA','M',NULL,'774557887');
INSERT INTO CLIENTE VALUES(NULL,'EDUARDO','M',NULL,'54376457');
INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','F','ANTONIO@IG.COM','12436767');
INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','M','ANTONIO@UOL.COM','3423565');
INSERT INTO CLIENTE VALUES(NULL,'ELAINE','M','ELAINE@GLOBO.COM','32567763');
INSERT INTO CLIENTE VALUES(NULL,'CARMEM','M','CARMEM@IG.COM','787832213');
INSERT INTO CLIENTE VALUES(NULL,'ADRIANA','F','ADRIANA@GMAIL.COM','88556942');
INSERT INTO CLIENTE VALUES(NULL,'JOICE','F','JOICE@GMAIL.COM','55412256');

/* CADASTRE UM ENDERECO PARA CADA CLIENTE */

INSERT INTO ENDERECO VALUES(NULL,'RUA GUEDES','CASCADURA','B. HORIZONTE','MG',9);
INSERT INTO ENDERECO VALUES(NULL,'RUA MAIA LACERDA','ESTACIO','RIO DE JANEIRO','RJ',10);
INSERT INTO ENDERECO VALUES(NULL,'RUA VISCONDESSA','CENTRO','RIO DE JANEIRO','RJ',11);
INSERT INTO ENDERECO VALUES(NULL,'RUA NELSON MANDELA','COPACABANA','RIO DE JANEIRO','RJ',12);
INSERT INTO ENDERECO VALUES(NULL,'RUA ARAUJO LIMA','CENTRO','VITORIA','ES',13);
INSERT INTO ENDERECO VALUES(NULL,'RUA CASTRO ALVES','LEBLON','RIO DE JANEIRO','RJ',14);
INSERT INTO ENDERECO VALUES(NULL,'AV CAPITAO ANTUNES','CENTRO','CURITIBA','PR',15);
INSERT INTO ENDERECO VALUES(NULL,'AV CARLOS BARROSO','JARDINS','SAO PAULO','SP',16);
INSERT INTO ENDERECO VALUES(NULL,'ALAMEDA SAMPAIO','BOM RETIRO','CURITIBA','PR',17);
INSERT INTO ENDERECO VALUES(NULL,'RUA DA LAPA','LAPA','SAO PAULO','SP',18);
INSERT INTO ENDERECO VALUES(NULL,'RUA GERONIMO','CENTRO','RIO DE JANEIRO','RJ',19);
INSERT INTO ENDERECO VALUES(NULL,'RUA GOMES FREIRE','CENTRO','RIO DE JANEIRO','RJ',20);
INSERT INTO ENDERECO VALUES(NULL,'RUA GOMES FREIRE','CENTRO','RIO DE JANEIRO','RJ',21);

/* CADASTRE TELEFONES PARA OS CLIENTES */


INSERT INTO TELEFONE VALUES(NULL,'RES','68976565',9);
INSERT INTO TELEFONE VALUES(NULL,'CEL','99656675',9);
INSERT INTO TELEFONE VALUES(NULL,'CEL','33567765',11);
INSERT INTO TELEFONE VALUES(NULL,'CEL','88668786',11);
INSERT INTO TELEFONE VALUES(NULL,'COM','55689654',11);
INSERT INTO TELEFONE VALUES(NULL,'COM','88687979',12);
INSERT INTO TELEFONE VALUES(NULL,'COM','88965676',13);
INSERT INTO TELEFONE VALUES(NULL,'CEL','89966809',15);
INSERT INTO TELEFONE VALUES(NULL,'COM','88679978',16);
INSERT INTO TELEFONE VALUES(NULL,'CEL','99655768',17);
INSERT INTO TELEFONE VALUES(NULL,'RES','89955665',18);
INSERT INTO TELEFONE VALUES(NULL,'RES','77455786',19);
INSERT INTO TELEFONE VALUES(NULL,'RES','89766554',19);
INSERT INTO TELEFONE VALUES(NULL,'RES','77755785',20);
INSERT INTO TELEFONE VALUES(NULL,'COM','44522578',20);


DESC CLIENTE;
DESC ENDERECO;
DESC TELEFONE;

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO 
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO 
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 11 OR 
IDCLIENTE = 12 OR 
IDCLIENTE = 13 OR 
IDCLIENTE = 17 OR 
IDCLIENTE = 18;


UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 11 OR 
IDCLIENTE = 12 OR 
IDCLIENTE = 13 OR 
IDCLIENTE = 17 OR 
IDCLIENTE = 18;

/* OU TAMBÉM PODE SE FAZER ASSIM*/

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE IN (11, 12, 13, 17, 18);


SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO 
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F';


SELECT * FROM CLIENTE
WHERE IDCLIENTE = 15;

UPDATE CLIENTE
SET SEXO = 'M'
WHERE IDCLIENTE = 15; 



SELECT COUNT(*) AS QUANTIDADE, SEXO FROM CLIENTE
GROUP BY SEXO;


SELECT C.IDCLIENTE, C.EMAIL, T.TIPO 
FROM CLIENTE C
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE (C.SEXO = 'F' AND
E.BAIRRO = 'CENTRO' 
AND E.CIDADE = 'RIO DE JANEIRO'
AND T.TIPO != 'CEL');


SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE E.ESTADO = 'RJ'
AND T.TIPO = 'CEL';

SELECT C.NOME, C.EMAIL, T.NUMERO 
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE C.SEXO = 'F'
AND E.ESTADO = 'SP'
AND T.TIPO = 'CEL';


SELECT  C.NOME, 
		IFNULL(C.EMAIL, 'NÃO TEM EMAIL') AS "E-MAIL", 
		E.ESTADO, 
		T.NUMERO
FROM CLIENTE C 
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

/* view */

SELECT  C.NOME, 
		C.SEXO, 
		C.EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

CREATE VIEW RELATORIO AS
SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL, "NÃO POSSUI E-MAIL CADASTRADO") AS "E-MAIL", 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

SELECT NOME,  FROM RELATORIO;

/* O VIEW é mostrado em SHOW TABLES, bizarro né?*/

DROP VIEW RELATORIO; /* PARA DELETAR A VIEW*/

/* DML COM VIEW*/

INSERT INTO RELATORIO VALUES(
	'ANDREA', 
	'F', 
	'ANDREIA@ALUNOS.UTFPR.EDU.BR', 
	'CEL', 
	'238183121', 
	'CENTRO', 
	'VITORIA', 
	'ES'
);

CREATE TABLE JOGADORES(
	IDJOGADOR INT,
	NOME VARCHAR(30),
	ESTADO CHAR(2)
)

INSERT INTO JOGADORES VALUES(1, 'GUERREIRO', 'RS');
INSERT INTO JOGADORES VALUES(1, 'KAKA', 'RJ');
INSERT INTO JOGADORES VALUES(1, 'ALEXANDRE PATO', 'PE');
INSERT INTO JOGADORES VALUES(1, 'JULIO CESAR', 'PR');
INSERT INTO JOGADORES VALUES(1, 'RONALDO', 'SC');

CREATE VIEW V_JOGADORES AS 
SELECT NOME, ESTADO 
FROM JOGADORES;

SELECT * FROM V_JOGADORES;

DELETE FROM V_JOGADORES 
WHERE NOME = 'GUERREIRO';

UPDATE JOGADORES
SET IDJOGADOR = 5
WHERE NOME LIKE 'G%';

INSERT INTO V_JOGADORES VALUES ('GUERREIRO','RS');


CREATE TABLE ALUNOS(
	NUMERO INT,
	NOME VARCHAR(30)
);

INSERT INTO ALUNOS VALUES(1, 'JOAO');
INSERT INTO ALUNOS VALUES(1, 'MARIA');
INSERT INTO ALUNOS VALUES(2, 'PEDRO');
INSERT INTO ALUNOS VALUES(2, 'ANA');
INSERT INTO ALUNOS VALUES(3, 'LUIS');
INSERT INTO ALUNOS VALUES(1, 'CAROLINA');
INSERT INTO ALUNOS VALUES(4, 'FELIPE');
INSERT INTO ALUNOS VALUES(5, 'RAFAEL');
INSERT INTO ALUNOS VALUES(1, 'ISABELA');
INSERT INTO ALUNOS VALUES(3, 'GABRIEL');
INSERT INTO ALUNOS VALUES(4, 'LARISSA');
INSERT INTO ALUNOS VALUES(5, 'MARCOS');
INSERT INTO ALUNOS VALUES(6, 'LUCIA');
INSERT INTO ALUNOS VALUES(6, 'BRUNO');
INSERT INTO ALUNOS VALUES(7, 'GISELE');
INSERT INTO ALUNOS VALUES(8, 'RENATO');

SELECT * FROM ALUNOS
ORDER BY 1; 

SELECT * FROM ALUNOS
ORDER BY NOME; 

/* Orderna pelo indíce da coluna ou pelo nome mesmo da coluna, aí fica a critério do programador*/

SELECT * FROM ALUNOS
ORDER BY 2;

/*ordernar por mais de uma coluna*/

SELECT * FROM ALUNOS
ORDER BY NUMERO, ALUNOS;

/* OU AINDA por indices:*/

SELECT * FROM ALUNOS
ORDER BY 1,2;

/* ORDER BY DESC / ASC */

SELECT * FROM ALUNOS
ORDER BY 1 ASC;

SELECT * FROM ALUNOS
ORDER BY 1 DESC;

SELECT * FROM ALUNOS
ORDER BY 1 DESC, 2 DESC;

SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL, "NÃO POSSUI E-MAIL CADASTRADO") AS "E-MAIL", 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
ORDER BY 1;


DELIMITER $

/* STORED PROCEDURES*/

SELECT 'MAFRA';

CREATE PROCEDURE NOME()
BEGIN
	QUALQUER PROGRAMACAO;
END$

CREATE PROCEDURE NOME_EMPRESA()
BEGIN
	SELECT 'UNIVERSIDADE DOS DADOS' AS EMPRESA;
END$

/* CHAMANDO PROCEDURE */
CALL NOME_EMPRESA()$

/* PROCEDURES COM PARÂMETROS */

SELECT 10 + 10 AS SOMA;

DROP PROCEDURE NOME_EMPRESA;

CREATE PROCEDURE CONTA(NUM1 INT, NUM2 INT)
BEGIN
	SELECT (NUM1 + NUM2) AS CONTA;
END$

CALL CONTA(231, 3211)$


CREATE DATABASE PROJETO;

USE PROJETO;

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3) NOT NULL,
	VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL, 'JAVA', 30, 500.00);
INSERT INTO CURSOS VALUES(NULL, 'FUNDAMENTOS DE BANCO DE DADOS', 40, 700.00);

DELIMITER #;

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),
						   P_HORAS INT(3),
						   P_PRECO FLOAT(10,2))
BEGIN
	INSERT INTO CURSOS VALUES(NULL, P_NOME, P_HORAS, P_PRECO);
END
#

DELIMITER ;

CALL CAD_CURSO('BI SQL SERVER', 35, 3000.00);


DELIMITER @

CREATE PROCEDURE CONSULTA_CURSOS()
BEGIN
	SELECT * FROM CURSOS;
END
@

DELIMITER ;

CALL CONSULTA_CURSOS;



CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL, 'CARLOS', 'M', 2321.32, 54233.32, 34324.53);
INSERT INTO VENDEDORES VALUES(NULL, 'Maria', 'F', 1987.45, 42321.12, 28976.78);
INSERT INTO VENDEDORES VALUES(NULL, 'João', 'M', 1765.21, 32134.45, 23456.89);
INSERT INTO VENDEDORES VALUES(NULL, 'Ana', 'F', 2123.87, 45678.90, 31234.56);
INSERT INTO VENDEDORES VALUES(NULL, 'Pedro', 'M', 1890.43, 38901.23, 26789.01);
INSERT INTO VENDEDORES VALUES(NULL, 'Catarina', 'F', 2456.78, 56789.01, 37890.12);
INSERT INTO VENDEDORES VALUES(NULL, 'Fernando', 'M', 2010.54, 49876.54, 32345.67);
INSERT INTO VENDEDORES VALUES(NULL, 'Isabel', 'F', 1768.32, 34567.89, 25678.90);
INSERT INTO VENDEDORES VALUES(NULL, 'Ricardo', 'M', 1985.21, 43210.98, 28901.23);
INSERT INTO VENDEDORES VALUES(NULL, 'Mariana', 'F', 2234.67, 54321.09, 35678.12);

/* MAX traz o valor máximo de uma coluna*/

SELECT MAX(FEVEREIRO) 
FROM VENDEDORES;

/*MÍNIMO*/
SELECT MIN(FEVEREIRO)
FROM VENDEDORES;

/*MÉDIA*/

SELECT AVG(FEVEREIRO)
FROM VENDEDORES;


SELECT MAX(JANEIRO) AS MAX_JAN,
	   MIN(JANEIRO) AS MIN_JAN,
	   AVG(JANEIRO) AS MEDIA_JAN
	   FROM VENDEDORES;

/*TRUNCATE */

SELECT MAX(JANEIRO) AS MAX_JAN,
	   MIN(JANEIRO) AS MIN_JAN,
	   TRUNCATE(AVG(JANEIRO), 2) AS MEDIA_JAN
	   FROM VENDEDORES;

/* SUM - SOMA OS ITENS DE UMA COLUNA*/

SELECT SUM(JANEIRO) AS TOTAL_JAN,
	   SUM(FEVEREIRO) AS TOTAL_FEV,
	   SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

/*VENDAS POR SEXO*/

SELECT SEXO, SUM(MARCO) AS TOTAL_MAR_FEM
FROM VENDEDORES
GROUP BY SEXO;

/*SUB QUERIES - EU FIZ A SUBQUERIES SEM ANTES SABER QUE ERA LOL*/

/* vendedor que vendeu menos em marco e o seu nome*/

SELECT NOME, MARCO AS MIN_MAR
FROM VENDEDORES WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO AS MAX_MAR
FROM VENDEDORES WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO AS MAX_MAR
FROM VENDEDORES WHERE MARCO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES );

SELECT NOME, FEVEREIRO AS MAX_MAR
FROM VENDEDORES 
WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES )
AND MARCO < (SELECT AVG(MARCO) FROM VENDEDORES);

SELECT AVG(FEVEREIRO) FROM VENDEDORES;

#para linha como funciona?
#DESSE jeito, muito bom 
#TRUNCATE serve para arredondar, seria o equivale ao round do python

SELECT NOME,
	   JANEIRO,
	   FEVEREIRO,
	   MARCO,
	   (JANEIRO + FEVEREIRO + MARCO) AS "TOTAL",
	   TRUNCATE ((JANEIRO + FEVEREIRO + MARCO)/3,2) AS "MEDIA"
	   FROM VENDEDORES

SELECT NOME, (JANEIRO + FEVEREIRO + MARCO) AS "TOTAL" 
FROM VENDEDORES
WHERE TOTAL = (SELECT MAX(JANEIRO + FEVEREIRO + MARCO) FROM VENDEDORES)

#mODIFICAR estrutura da tabela


CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

#Adicionando uma PK
ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1)

#Adicionando 
ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1)

#adicionando uma coluna sem posicao. Ela vai pra última

ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);

#ADICIONANDO COLUNA COM POSIÇÃO

ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

#MODIFICANDO O TIPO DE UM CAMPO
#OS TIPOS DEVEM SER COMPATIVEIS
#EX: DARIA ERRO TRANSFORMAR 'MATHEUS' PARA INT EVIDENTEMENTE xD
ALTER TABLE TABELA
MODIFY COLUNA2 DATE NOT NULL;

#RENOMEANDO UMA TABLE:
ALTER TABLE TABELA
RENAME PESSOA;


CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
)

#FK -> Chave estrangeira foreign key

ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

#verificar chaves

SHOW CREATE TABLE TIME;

#ORganização de chaves


CREATE TABLE JOGADOR(
	IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30)
	);

CREATE TABLE TIMES(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	NOMETIME VARCHAR(30),
	ID_JOGADOR INT,
	FOREIGN KEY (ID_JOGADOR)
	REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL, 'GUERREIRO');
INSERT INTO JOGADOR VALUES(NULL, 'RONALDO');
INSERT INTO TIMES VALUES(NULL, 'FLAMENGO', 1);

SELECT * FROM TIMES

SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES;


/*ORGANIZANDO CHAVES E ACOES DE CONSTRAINTS*/

SHOW TABLES;
DROP TABLE ENDERECO;
DROP TABLE TELEFONE;
DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT 
);

#DESSA FORMA É UMA PRÁTICA MUITO MELHOR PARA INDICAR PK E FK

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY (IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

#AGORA NO SHOW CREATE JÁ NÃO APARECE MAIS O NOME ESTRANHO
#EMBORA EU 

SHOW CREATE TABLE TELEFONE;

#DICIONÁRIO DE DADOS

SHOW DATABASES;

USE INFORMATION_SCHEMA;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
	   TABLE_NAME AS "TABELA",
	   CONSTRAINT_NAME AS "NOME_REGRA",
	   CONSTRAINT_TYPE AS "TIPO"
	   FROM TABLE_CONSTRAINTS
	   WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

#APAGANDO CONSTRAINTS

USE COMERCIO;

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

#É BOM TIRAR E COLOCAR PARA PROCESSAMENTO, VER NO VIDEO PARA ENTENDER MELHOR

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

#EX SOLUCAO

CREATE DATABASE PROJETO;



CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	ID_CARRO INT UNIQUE,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M', 'F') NOT NULL
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	ID_MARCA INT,
	PLACA VARCHAR(20) NOT NULL UNIQUE,
	MODELO VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('CEL', 'RES', 'COM') NOT NULL,
	NUMERO VARCHAR(30) NOT NULL,
	ID_CLIENTE INT
);

CREATE TABLE COR(
	IDCOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(30) UNIQUE

);

CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(30) UNIQUE
	);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY (ID_CARRO, ID_COR)
	);

#CONSTRAINTS

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY (ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY (ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY (ID_COR)
REFERENCES COR(IDCOR);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY (ID_CARRO)
REFERENCES CARRO(IDCARRO);

INSERT INTO CARRO VALUES (NULL)

/* TRIGGERS*/

CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR REACH ROW (PARA CADA LINHA)
BEGIN -> INICIO

END -> FIM

CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

/* CRIANDO A TRIGGER */

DELIMITER $

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN 

	INSERT INTO BKP_USUARIO VALUES
	(NULL, OLD.IDUSUARIO, OLD.NOME, OLD.LOGIN);

END
$

DELIMITER ;

INSERT INTO USUARIO VALUES(NULL,'ANDRADE', 'ANDRADE2009', 'HEXACAMPEAO');

DELETE FROM USUARIO WHERE IDUSUARIO = 1;

SELECT * FROM BKP_USUARIO;

/* triggers para backup de base de dados (sgb)
comunicação entre bancos e backup*/

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

STATUS;

CREATE DATABASE BACKUP;

USE BACKUP;

STATUS;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA;

/* PARA COMUNICAR DE OUTRA DATABASE, USE O "NOMEBANCO.SCHEMA*/

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, 1000, 'TESTE', 0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);

END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO BI', 80.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO PYTHON', 60.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO SQL SERVER', 110.00);

SELECT * FROM BACKUP.BKP_PRODUTO;

/* E REALMENTE ESTÁ NO BANCO BACKUP, é um BACKUP LÓGICO E NÃO FÍSICO*/
/* O BACKUP FÍSICO SERIA A CRIAÇÃO DE UM ARQUIVO COM OS DADOS*/


DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR);

END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

/* */

DROP TRIGGER BACKUP_PRODUTO;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);

END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL, 'LIVRO C#', 100.00);

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DEL;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, OLD.IDPRODUTO,
	OLD.NOME, OLD.VALOR, 'D');
END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;

select * from BACKUP.BKP_PRODUTO;

/* TRIGGER DE AUDITORIA*/

/* COMO DEIXAR SALVO EM OUTRA TABELA MODIFICAÇÕES FEITAS PELOS USUARIOS
ACHEI BEM IMPORTANTE E ÚTIL, VEJA ABAIXO*/

DROP DATABASE LOJA;

DROP DATABASE BACKUP;

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);


INSERT INTO PRODUTO VALUES(NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO BI', 80.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO PYTHON', 60.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO SQL SERVER', 110.00);

CREATE DATABASE BACKUP;

USE BACKUP;


/*quando*/
SELECT NOW();
/* quem*/
SELECT CURRENT_USER();

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
);

DELIMITER $

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, OLD.IDPRODUTO,
	OLD.NOME, OLD.VALOR, NEW.VALOR, NOW(), CURRENT_USER,'U');
END
$

DELIMITER ;

UPDATE PRODUTO SET VALOR = 150.00
WHERE IDPRODUTO = 4;

UPDATE PRODUTO SET VALOR = 130.00
WHERE IDPRODUTO = 1;
UPDATE PRODUTO SET VALOR = 50.00
WHERE IDPRODUTO = 2;
UPDATE PRODUTO SET VALOR = 90.00
WHERE IDPRODUTO = 3;

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

/* FIM DA AULA DE TRIGGERS*/

/* RELACIONAMENTO COM A PRÓPRIA TABELA*/
CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);


INSERT INTO CURSOS VALUES(NULL, 'BD RELACIONAL', 20, 400.00, NULL);
INSERT INTO CURSOS VALUES(NULL, 'ALGORITMOS', 20, 400.00, NULL);
INSERT INTO CURSOS VALUES(NULL, 'JAVASCRIPT', 40, 550.00, 2);
INSERT INTO CURSOS VALUES(NULL, 'C# .NET', 60, 890.00, 2);
INSERT INTO CURSOS VALUES(NULL, 'REACT NATIVE', 15, 320.00, 3);


select nome, valor, horas, IFNULL(ID_PREREQ, "SEM REQ") REQUISITO
FROM CURSOS;

select 
C.nome AS CURSO,
C.valor AS VALOR,
C.horas AS CARGA,
 IFNULL(P.NOME, "----------") AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;

/* CURSORES PODE SER CONSIDERADO UM ASSUNTO DIFÍCIL*/

CREATE DATABASE CURSORES;

USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT 
);

INSERT INTO VENDEDORES VALUES(NULL, 'MAFRA', 32122, 70942, 432312);
INSERT INTO VENDEDORES VALUES(NULL, 'SILVA', 12345, 67890, 987654);
INSERT INTO VENDEDORES VALUES(NULL, 'ALMEIDA', 54321, 98765, 456789);
INSERT INTO VENDEDORES VALUES(NULL, 'SANTOS', 98765, 12345, 876543);
INSERT INTO VENDEDORES VALUES(NULL, 'PEREIRA', 13579, 24680, 135792);
INSERT INTO VENDEDORES VALUES(NULL, 'RODRIGUES', 24680, 13579, 246801);
INSERT INTO VENDEDORES VALUES(NULL, 'FERNANDES', 98765, 54321, 456789);
INSERT INTO VENDEDORES VALUES(NULL, 'GONÇALVES', 75321, 95148, 369852);
INSERT INTO VENDEDORES VALUES(NULL, 'COSTA', 98741, 75369, 852963);
INSERT INTO VENDEDORES VALUES(NULL, 'CARVALHO', 65478, 14785, 369852);
INSERT INTO VENDEDORES VALUES(NULL, 'MARTINS', 12369, 98741, 654789);


SELECT * FROM VENDEDORES;

SELECT NOME, (JAN + FEV + MAR) AS TOTAL, (JAN + FEV + MAR)/3 AS MEDIA FROM VENDEDORES;
/*SUPONDO QUE O BANCO É MUITO GRANDE, ESTE ÚLTIMO COMANDO DEMANDARIA MUITO PROCESSAMENTO
*/

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT 
);

/* FAZENDO O CURSOR PARA COLOCAR DIRETO NO TOTAL E MEDIA NA TABELA*/

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN 
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT; 	
	DECLARE VNOME VARCHAR(50);

	DECLARE REG CURSOR FOR (
		SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
	);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1; 

	OPEN REG;

	REPEAT 

		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN

			SET VTOTAL = VAR1 + VAR2 + VAR3;

			SET VMEDIA = VTOTAL/3;

			INSERT INTO VEND_TOTAL VALUES(VNOME, VAR1, VAR2, VAR3, VTOTAL, VMEDIA);
		END IF;

	UNTIL FIM END REPEAT;

	CLOSE REG;

END
$

/* O DECLARE CONTINUE É COMO SE FOSSE O BREAK DE PARADA DE UM FOR OU WHILE*/
/* OPEN REG JOGA O VETOR NA MEMORIA RAM*/

DELIMITER ;

SELECT * FROM VEND_TOTAL;

DELIMITER ;

DROP PROCEDURE INSEREDADOS;

CALL INSEREDADOS();


/* A 2ª E A 3ª FORMA NORMAL*/

/* PRIMEIRA FN 

ATOMICIDADE - UM CAMPO NÃO PODE SER DIVISÍVEL
UM CAMPO NÃO PODE SER VETORIZADO
PK CHAVE PRIMÁRIA

NA AULA EXPLICA UM EXEMPLO DE UM HOSPITAL, ONDE TEM UM PACIENTE E UM MÉDICO
*/

CREATE DATABASE CONSULTORIO;

USE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE
);


/* CRIANDO AS CONSTRAINTS PARA INTERLIGAR AS TABELAS ATRAVÉS DE PK E FK*/

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);
